// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  nom       String
  prenom    String
  role      UserRole
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  commandesAchat Commande[] @relation("ResponsableAchat")
  paiements      Paiement[] @relation("ResponsablePaiement")

  @@map("users")
}

model Categorie {
  id           String          @id @default(cuid())
  nom          String          @unique
  description  String?
  isArchived   Boolean         @default(false)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // Relations
  sousCategories SousCategorie[]

  @@map("categories")
}

model SousCategorie {
  id          String   @id @default(cuid())
  nom         String
  description String?
  categorieId String
  isArchived  Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  categorie Categorie @relation(fields: [categorieId], references: [id], onDelete: Cascade)
  produits  Produit[]

  @@unique([nom, categorieId])
  @@map("sous_categories")
}

model Fournisseur {
  id         String   @id @default(cuid())
  numero     String   @unique
  nom        String
  adresse    String
  telephone  String?
  email      String?
  isArchived Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  commandes Commande[]

  @@map("fournisseurs")
}

model Produit {
  id              String   @id @default(cuid())
  code            String   @unique
  designation     String
  quantiteStock   Int      @default(0)
  prixUnitaire    Decimal  @db.Decimal(10, 2)
  image           String?
  sousCategorieId String
  isArchived      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  sousCategorie    SousCategorie     @relation(fields: [sousCategorieId], references: [id], onDelete: Cascade)
  articlesCommande ArticleCommande[]

  @@map("produits")
}

model Commande {
  id                    String     @id @default(cuid())
  numero                String     @unique
  date                  DateTime   @default(now())
  fournisseurId         String
  montant               Decimal    @db.Decimal(10, 2)
  dateLivraisonPrevue   DateTime
  dateLivraisonReelle   DateTime?
  statut                StatutCommande @default(EN_COURS)
  responsableAchatId    String
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt

  // Relations
  fournisseur      Fournisseur       @relation(fields: [fournisseurId], references: [id], onDelete: Cascade)
  responsableAchat User              @relation("ResponsableAchat", fields: [responsableAchatId], references: [id], onDelete: Cascade)
  articles         ArticleCommande[]
  paiements        Paiement[]

  @@map("commandes")
}

model ArticleCommande {
  id         String  @id @default(cuid())
  commandeId String
  produitId  String
  quantite   Int
  prixAchat  Decimal @db.Decimal(10, 2)
  sousTotal  Decimal @db.Decimal(10, 2)

  // Relations
  commande Commande @relation(fields: [commandeId], references: [id], onDelete: Cascade)
  produit  Produit  @relation(fields: [produitId], references: [id], onDelete: Cascade)

  @@map("articles_commande")
}

model Paiement {
  id                     String   @id @default(cuid())
  numero                 String   @unique
  commandeId             String
  montant                Decimal  @db.Decimal(10, 2)
  date                   DateTime @default(now())
  numeroVersement        Int
  responsablePaiementId  String
  notes                  String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relations
  commande             Commande @relation(fields: [commandeId], references: [id], onDelete: Cascade)
  responsablePaiement  User     @relation("ResponsablePaiement", fields: [responsablePaiementId], references: [id], onDelete: Cascade)

  @@unique([commandeId, numeroVersement])
  @@map("paiements")
}

enum UserRole {
  GESTIONNAIRE
  RESPONSABLE_ACHAT
  RESPONSABLE_PAIEMENT

  @@map("user_roles")
}

enum StatutCommande {
  EN_COURS
  LIVRE
  PAYE
  ANNULE

  @@map("statut_commandes")
}
